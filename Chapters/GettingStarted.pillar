!!Getting started

!!! Installation

For this booklet we rely on Pharo 6.1. Once up and running, you can install
QCMagritte and all its dependencies (including Seaside, Magritte and Bootstrap)
with Metacello:

[[[
Metacello new 
  githubUser: 'Afibre' project: 'QCMagritte' commitish: 'master' path: 'src'; 
  baseline: 'QCMagritte';
  load.
]]]


Note that pre-built 64 bits images are available
at *https://github.com/Afibre/QCMagritte/releases*.

Start the Zinc web server on port ==8080==:

[[[
ZnZincServerAdaptor startOn: 8080
]]]

Then point your browser to *http://localhost:8080/*. It should display the
QCMagritte tutorial as in picture *@QCMagritteTutorial*

+The QCMagritte tutorial>file://figures/qcmagritte_tutorial.png|width=70|label=QCMagritteTutorial+


!!! The ToDo application

We provide a summary of the QCMagritte tutorial below. We will focus here on the
minimum to go to the next chapter.

The creation of a QCMagritte application requires to subclass ==QCBootstrapApplication==:

[[[
QCBootstrapApplication subclass: #ToDoApplication
  instanceVariableNames: ''
  classVariableNames: ''
  category: 'ToDo-Web'
]]]


then to register it in Seaside:

[[[
ToDoApplication registerForDevelopmentAt: 'ToDo'.
]]]

QCBootstrapApplication requires to define ==#title== that answers the title of
the application:

[[[
ToDoApplication >> title
  ^ 'What to do ?'
]]]

+ToDo application>file://figures/qcmagritte_todo.png|width=70|label=ToDoApplication+

Now the page at *http://localhost:8080/ToDo* should display the ToDo application
as shown in screenshot *@ToDoApplication*.



!!! Model definition

QCMagritte applications are model driven. That means we will put some effort in
describing models handled by the application. Then we expect QCMagritte to
generate a nice web interface to administrate these models.

In a QCBootstrapApplication subclass we have to declare the entry point, the model
that acts as the root of all objects, datas that will be manipulated through the
web interface. Here the model will be an instance of a
==QCBootstrapApplicationModel== subclass:

[[[
QCBootstrapApplicationModel subclass: #ToDoListModel
  instanceVariableNames: ''
  classVariableNames: ''
  category: 'ToDo-Model'
]]]

Then we link this model to our application by overriding
==ToDoApplication >> model==:

[[[
ToDoApplication >> model
  ^ToDoListModel default
]]]


!!!! ToDo items

For ToDoApplication, we need some ==ToDo items== that have a ==title==, a ==description==
and a ==completion== status. Let's declare this class as a subclass of ==QCObject==:

[[[
QCObject subclass: #ToDoItem
  instanceVariableNames: 'title description completed'
  classVariableNames:''
  category:'ToDo-Model'

ToDoItem >> title
	^title

ToDoItem >> description
	^description

ToDoItem >> completed
	^completed ifNil: [ false ]
  
ToDoItem >> title: aString
	title := aString

ToDoItem >> description: aString
	^description := aString

ToDoItem >> completed: aBoolean
	completed := aBoolean
]]]


Now we can describe properly or ToDo items variables using Magritte. First,
==title== is a required string:

[[[
ToDoItem >> descriptionTitle
  <magritteDescription>
  ^MAStringDescription new
      accessor: #title;
      label: 'Title';
      priority: 100;
      beRequired;
      yourself
]]]


Then comes ==description== as a long string:

[[[
ToDoItem >> descriptionDescription
	<magritteDescription>
	^MAMemoDescription new
      accessor: #description;
      label: 'Description';
      priority: 200;
      yourself
]]]

Finally there's the completion status as a boolean:

[[[
ToDoItem >> descriptionCompleted
  <magritteDescription>
  ^MABooleanDescription new
      accessor: #completed;
      label: 'Completed';
      priority: 300;
      yourself
]]]


!!!! Putting all together

Finally, we need a way to store created Todo items. We will talk about Glorp
persistence in the next chapter. For now, let's use an
==OrderedCollection==. Add instance variable ==todoItems== in ==ToDoListModel==
as follow:

[[[
QCBootstrapApplicationModel subclass: #ToDoListModel
  instanceVariableNames: 'todoItems'
  classVariableNames: ''
  category: 'Tutorial-Model'


ToDoListModel >> todoItems
  ^todoItems ifNil: [ todoItems := OrderedCollection new ]

ToDoListModel >> todoItems: aCollection
  todoItems := aCollection
]]]

Then describe this variable using Magritte description
==MAToMaManyRelationDescription==:

[[[
ToDoListModel >> descriptionToDoItems
  <magritteDescription>
  ^MAToManyRelationDescription new
    label: 'Todo';
    accessor: #todoItems;
    priority: 200;
    classes: { ToDoItem };
    yourself
]]]

Go back to your web browser, you should be able to create / update / delete some
items (see *@ToDoWithModel*)

+ToDo application front page>file://figures/qcmagritte_todo_with_model.png|width=70|label=ToDoWithModel+
