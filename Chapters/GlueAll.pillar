!!Plug Seaside, Magritte and GLORP

Now we have a QCMagritte application on one side and a persistence layer on the other side. We need to plug things together in order to have a full stack.

As seen in previous chapter, we need to open a GLORP session to load and save objects. Several ways exists in a web stack to handle persistence sessions creation / deletion: one global session, one persistence session per web session, a session pool.

One global session is easiest, but have several performance and security drawbacks.

A session pool may be necessary to handle lot of parallelized web sessions. The complexity may be high.

One persistence session per web session will be the choosen way for this booklet. The core mechanisms involved will also be a base if you need to go for a pool model.


!!! Seaside sessions

On a Seaside application you can specify a WASession (or subclass) class that will be instancianted when a user accesses an application for the first time.

We can override the method ==sessionClass== in our ==ToDoApplication== to answer a custom session class that will handle a persistence session.

So first, let's create our custom session class as a subclass of ==QCSession==. Note the instance variable ==databaseSession== that will be use to handle the GLORP session.

[[[
QCSession subclass: #ToDoSession
	instanceVariableNames: 'databaseSession'
	classVariableNames: ''
	package: 'ToDo-Web'
]]]


Then define ==sessionClass== on the class side of ==ToDoApplication==:

[[[
ToDoApplication class >> sessionClass
  ^ ToDoSession
]]]


To reflect the change, we need to register the application again:

[[[
ToDoApplication registerForDevelopmentAt: 'ToDo'.
]]]

You can check ==ToDoSession== is used by opening the web page *http://localhost:8080/config/ToDo* and have a look at the ==Session class== parameter as shown in  *@ToDoSession*.

+ToDo application>file://figures/todosession.png|width=70|label=ToDoSession+


!!! GLORP sessions

Now that we have a session class, we can add some custom behaviour. This session object can be accessed by every ==QCObject== subclass. That means ==ToDoListModel== will be able to load items from GLORP through the session object.

So on the session object we add a ==database== accessor that will create the GLORP session if it does not exists:

[[[
ToDoSession >> database
	^ databaseSession ifNil: [ databaseSession := self createDatabaseSession ]


ToDoSession >> createDatabaseSession
  ^ ToDoDatabase session
       login;
       yourself
]]]


When the session is unregistered by Seaside, it should also close the GLORP session. So we override the medthod ==unregistered== in ==ToDoSession==:

[[[
ToDoSession >> unregistered
	super unregistered.
	self database logout; close.
	databaseSession := nil.
]]]


Make sure you still have the items in the ==todos== database as seen in previous chapter. We will now instruct ==ToDoListModel== to load items from the database instead of an ordered collection. So update ==ToDoListModel >> todoItems== as follows:

[[[
ToDoListModel >> todoItems
  | query |
  query := (Query read: ToDoItem) shouldRefresh: true.
  ^ self database execute: query
]]]


Now refresh your browser on *http://localhost:8080/ToDo*. It should look like capture  *@GlorpTodo*.

+ToDo application>file://figures/glorp_todo.png|width=70|label=GlorpTodo+


!!! Adding and removing ToDo items

When you add or remove ToDo items from the web interface, Magritte will pass the entire collection to ==ToDoListModel >> todoItems:==. So we have to check whether we need to add or delete objects from GLORP each time the message is received. Change the method as follows:

[[[
ToDoListModel >> todoItems: aCollection
  self session database inUnitOfWorkDo: [:session| |itemsInDb|
    itemsInDb := self todoItems.
    
    itemsInDb do: [:each | 
	  (aCollection includes: each) ifFalse: [session delete: each].
    ].

    aCollection do: [ :each | 
      (itemsInDb includes: each) ifFalse: [session register: each ] 
	]
  ].
]]]

Know you should be able to add and delete ToDo items. However, updating an existing one won't work.


!!! Updating ToDo items

When you update a model through a form in the web interface, Magritte cache the values being read and written. On the post operation, it will update the model directly without sending any message to ==ToDoListModel==. This caching is done by ==MACachedMemento==.

Fortunaly, QCMagritte's ==QCObject== allows us to use other memento objects quite easily. What we need to do is:
#Create a memento class that propagate a model changes in GLORP
#Tells ==ToDoItem== to use this memento

Create a new memento class ==ToDoMemento== by subclassing QCMagritte's ==QCAjaxMemento==:

[[[
QCAjaxMemento subclass: #ToDoMemento
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'ToDo-Web'
]]]


This memento will need to access the GLORP session. We can do this by accessing the dynamic variable ==WACurrentRequestContext== that holds the seaside session object, that will be an instance of ==ToDoSession== in our project:

[[[
ToDoMemento >> database
  ^ WACurrentRequestContext value session database
]]]

Then override the method ==push:== that is executed when Magritte commit changes:

[[[
ToDoMemento >> push: aDictionary
  self database inUnitOfWorkDo: [:session | 
    session register: self model.
	super push: aDictionary.
  ].
]]]


The last part, tell ==ToDoItem== to use the memento class ==ToDoMemento== by overriding the method ==mementoClass==:

[[[
ToDoItem >> mementoClass
  ^ ToDoMemento
]]]


Now updating should work flawlessly !
